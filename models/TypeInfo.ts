/**
 * GameTrip.API
 * GameTrip API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Assembly } from '../models/Assembly';
import { ConstructorInfo } from '../models/ConstructorInfo';
import { CustomAttributeData } from '../models/CustomAttributeData';
import { EventInfo } from '../models/EventInfo';
import { FieldInfo } from '../models/FieldInfo';
import { GenericParameterAttributes } from '../models/GenericParameterAttributes';
import { MemberInfo } from '../models/MemberInfo';
import { MemberTypes } from '../models/MemberTypes';
import { MethodBase } from '../models/MethodBase';
import { MethodInfo } from '../models/MethodInfo';
import { Module } from '../models/Module';
import { PropertyInfo } from '../models/PropertyInfo';
import { RuntimeTypeHandle } from '../models/RuntimeTypeHandle';
import { StructLayoutAttribute } from '../models/StructLayoutAttribute';
import { Type } from '../models/Type';
import { TypeAttributes } from '../models/TypeAttributes';
import { HttpFile } from '../http/http';

export class TypeInfo {
    'name'?: string | null;
    'customAttributes'?: Array<CustomAttributeData> | null;
    'isCollectible'?: boolean;
    'metadataToken'?: number;
    'isInterface'?: boolean;
    'memberType'?: MemberTypes;
    'namespace'?: string | null;
    'assemblyQualifiedName'?: string | null;
    'fullName'?: string | null;
    'assembly'?: Assembly;
    'module'?: Module;
    'isNested'?: boolean;
    'declaringType'?: Type;
    'declaringMethod'?: MethodBase;
    'reflectedType'?: Type;
    'underlyingSystemType'?: Type;
    'isTypeDefinition'?: boolean;
    'isArray'?: boolean;
    'isByRef'?: boolean;
    'isPointer'?: boolean;
    'isConstructedGenericType'?: boolean;
    'isGenericParameter'?: boolean;
    'isGenericTypeParameter'?: boolean;
    'isGenericMethodParameter'?: boolean;
    'isGenericType'?: boolean;
    'isGenericTypeDefinition'?: boolean;
    'isSZArray'?: boolean;
    'isVariableBoundArray'?: boolean;
    'isByRefLike'?: boolean;
    'hasElementType'?: boolean;
    'genericTypeArguments'?: Array<Type> | null;
    'genericParameterPosition'?: number;
    'genericParameterAttributes'?: GenericParameterAttributes;
    'attributes'?: TypeAttributes;
    'isAbstract'?: boolean;
    'isImport'?: boolean;
    'isSealed'?: boolean;
    'isSpecialName'?: boolean;
    'isClass'?: boolean;
    'isNestedAssembly'?: boolean;
    'isNestedFamANDAssem'?: boolean;
    'isNestedFamily'?: boolean;
    'isNestedFamORAssem'?: boolean;
    'isNestedPrivate'?: boolean;
    'isNestedPublic'?: boolean;
    'isNotPublic'?: boolean;
    'isPublic'?: boolean;
    'isAutoLayout'?: boolean;
    'isExplicitLayout'?: boolean;
    'isLayoutSequential'?: boolean;
    'isAnsiClass'?: boolean;
    'isAutoClass'?: boolean;
    'isUnicodeClass'?: boolean;
    'isCOMObject'?: boolean;
    'isContextful'?: boolean;
    'isEnum'?: boolean;
    'isMarshalByRef'?: boolean;
    'isPrimitive'?: boolean;
    'isValueType'?: boolean;
    'isSignatureType'?: boolean;
    'isSecurityCritical'?: boolean;
    'isSecuritySafeCritical'?: boolean;
    'isSecurityTransparent'?: boolean;
    'structLayoutAttribute'?: StructLayoutAttribute;
    'typeInitializer'?: ConstructorInfo;
    'typeHandle'?: RuntimeTypeHandle;
    'guid'?: string;
    'baseType'?: Type;
    'isSerializable'?: boolean;
    'containsGenericParameters'?: boolean;
    'isVisible'?: boolean;
    'genericTypeParameters'?: Array<Type> | null;
    'declaredConstructors'?: Array<ConstructorInfo> | null;
    'declaredEvents'?: Array<EventInfo> | null;
    'declaredFields'?: Array<FieldInfo> | null;
    'declaredMembers'?: Array<MemberInfo> | null;
    'declaredMethods'?: Array<MethodInfo> | null;
    'declaredNestedTypes'?: Array<TypeInfo> | null;
    'declaredProperties'?: Array<PropertyInfo> | null;
    'implementedInterfaces'?: Array<Type> | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "customAttributes",
            "baseName": "customAttributes",
            "type": "Array<CustomAttributeData>",
            "format": ""
        },
        {
            "name": "isCollectible",
            "baseName": "isCollectible",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "metadataToken",
            "baseName": "metadataToken",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "isInterface",
            "baseName": "isInterface",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "memberType",
            "baseName": "memberType",
            "type": "MemberTypes",
            "format": ""
        },
        {
            "name": "namespace",
            "baseName": "namespace",
            "type": "string",
            "format": ""
        },
        {
            "name": "assemblyQualifiedName",
            "baseName": "assemblyQualifiedName",
            "type": "string",
            "format": ""
        },
        {
            "name": "fullName",
            "baseName": "fullName",
            "type": "string",
            "format": ""
        },
        {
            "name": "assembly",
            "baseName": "assembly",
            "type": "Assembly",
            "format": ""
        },
        {
            "name": "module",
            "baseName": "module",
            "type": "Module",
            "format": ""
        },
        {
            "name": "isNested",
            "baseName": "isNested",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "declaringType",
            "baseName": "declaringType",
            "type": "Type",
            "format": ""
        },
        {
            "name": "declaringMethod",
            "baseName": "declaringMethod",
            "type": "MethodBase",
            "format": ""
        },
        {
            "name": "reflectedType",
            "baseName": "reflectedType",
            "type": "Type",
            "format": ""
        },
        {
            "name": "underlyingSystemType",
            "baseName": "underlyingSystemType",
            "type": "Type",
            "format": ""
        },
        {
            "name": "isTypeDefinition",
            "baseName": "isTypeDefinition",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isArray",
            "baseName": "isArray",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isByRef",
            "baseName": "isByRef",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isPointer",
            "baseName": "isPointer",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isConstructedGenericType",
            "baseName": "isConstructedGenericType",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isGenericParameter",
            "baseName": "isGenericParameter",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isGenericTypeParameter",
            "baseName": "isGenericTypeParameter",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isGenericMethodParameter",
            "baseName": "isGenericMethodParameter",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isGenericType",
            "baseName": "isGenericType",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isGenericTypeDefinition",
            "baseName": "isGenericTypeDefinition",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isSZArray",
            "baseName": "isSZArray",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isVariableBoundArray",
            "baseName": "isVariableBoundArray",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isByRefLike",
            "baseName": "isByRefLike",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "hasElementType",
            "baseName": "hasElementType",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "genericTypeArguments",
            "baseName": "genericTypeArguments",
            "type": "Array<Type>",
            "format": ""
        },
        {
            "name": "genericParameterPosition",
            "baseName": "genericParameterPosition",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "genericParameterAttributes",
            "baseName": "genericParameterAttributes",
            "type": "GenericParameterAttributes",
            "format": ""
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "TypeAttributes",
            "format": ""
        },
        {
            "name": "isAbstract",
            "baseName": "isAbstract",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isImport",
            "baseName": "isImport",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isSealed",
            "baseName": "isSealed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isSpecialName",
            "baseName": "isSpecialName",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isClass",
            "baseName": "isClass",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isNestedAssembly",
            "baseName": "isNestedAssembly",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isNestedFamANDAssem",
            "baseName": "isNestedFamANDAssem",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isNestedFamily",
            "baseName": "isNestedFamily",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isNestedFamORAssem",
            "baseName": "isNestedFamORAssem",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isNestedPrivate",
            "baseName": "isNestedPrivate",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isNestedPublic",
            "baseName": "isNestedPublic",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isNotPublic",
            "baseName": "isNotPublic",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isPublic",
            "baseName": "isPublic",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isAutoLayout",
            "baseName": "isAutoLayout",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isExplicitLayout",
            "baseName": "isExplicitLayout",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isLayoutSequential",
            "baseName": "isLayoutSequential",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isAnsiClass",
            "baseName": "isAnsiClass",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isAutoClass",
            "baseName": "isAutoClass",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isUnicodeClass",
            "baseName": "isUnicodeClass",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isCOMObject",
            "baseName": "isCOMObject",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isContextful",
            "baseName": "isContextful",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isEnum",
            "baseName": "isEnum",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isMarshalByRef",
            "baseName": "isMarshalByRef",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isPrimitive",
            "baseName": "isPrimitive",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isValueType",
            "baseName": "isValueType",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isSignatureType",
            "baseName": "isSignatureType",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isSecurityCritical",
            "baseName": "isSecurityCritical",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isSecuritySafeCritical",
            "baseName": "isSecuritySafeCritical",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isSecurityTransparent",
            "baseName": "isSecurityTransparent",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "structLayoutAttribute",
            "baseName": "structLayoutAttribute",
            "type": "StructLayoutAttribute",
            "format": ""
        },
        {
            "name": "typeInitializer",
            "baseName": "typeInitializer",
            "type": "ConstructorInfo",
            "format": ""
        },
        {
            "name": "typeHandle",
            "baseName": "typeHandle",
            "type": "RuntimeTypeHandle",
            "format": ""
        },
        {
            "name": "guid",
            "baseName": "guid",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "baseType",
            "baseName": "baseType",
            "type": "Type",
            "format": ""
        },
        {
            "name": "isSerializable",
            "baseName": "isSerializable",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "containsGenericParameters",
            "baseName": "containsGenericParameters",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isVisible",
            "baseName": "isVisible",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "genericTypeParameters",
            "baseName": "genericTypeParameters",
            "type": "Array<Type>",
            "format": ""
        },
        {
            "name": "declaredConstructors",
            "baseName": "declaredConstructors",
            "type": "Array<ConstructorInfo>",
            "format": ""
        },
        {
            "name": "declaredEvents",
            "baseName": "declaredEvents",
            "type": "Array<EventInfo>",
            "format": ""
        },
        {
            "name": "declaredFields",
            "baseName": "declaredFields",
            "type": "Array<FieldInfo>",
            "format": ""
        },
        {
            "name": "declaredMembers",
            "baseName": "declaredMembers",
            "type": "Array<MemberInfo>",
            "format": ""
        },
        {
            "name": "declaredMethods",
            "baseName": "declaredMethods",
            "type": "Array<MethodInfo>",
            "format": ""
        },
        {
            "name": "declaredNestedTypes",
            "baseName": "declaredNestedTypes",
            "type": "Array<TypeInfo>",
            "format": ""
        },
        {
            "name": "declaredProperties",
            "baseName": "declaredProperties",
            "type": "Array<PropertyInfo>",
            "format": ""
        },
        {
            "name": "implementedInterfaces",
            "baseName": "implementedInterfaces",
            "type": "Array<Type>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return TypeInfo.attributeTypeMap;
    }

    public constructor() {
    }
}



